// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`it renders 1`] = `
<Example
  description="Example of function modifiers in Solidity"
  html="<p>Modifiers are code that can be run before and / or after a function call.</p>
<p>Modifiers can be used to:</p>
<ul>
<li>Restrict access</li>
<li>Validate inputs</li>
<li>Guard against reentrancy hack</li>
</ul>
<pre><code class=\\"language-solidity\\">pragma solidity ^0.6.0;

contract FunctionModifier {
    // We will use these variables to demonstrate how to use
    // modifiers.
    address public owner;
    uint public x = 10;
    bool public locked;

    constructor() public {
        // Set the transaction sender as the owner of the contract.
        owner = msg.sender;
    }

    // Modifier to check that the caller is the owner of
    // the contract.
    modifier onlyOwner() {
        require(msg.sender == owner, \\"Not owner\\");
        // Underscore is a special character only used inside
        // a function modifier and it tells Solidity to
        // execute the rest of the code.
        _;
    }

    // Modifiers can take inputs. This modifier checks that the
    // address passed in is not the zero address.
    modifier validAddress(address _addr) {
        require(_addr != address(0), \\"Not valid address\\");
        _;
    }

    function changeOwner(address _newOwner)
        public
        onlyOwner
        validAddress(_newOwner)
    {
        owner = _newOwner;
    }

    // Modifiers can be called before and / or after a function.
    // This modifier prevents a function from being called while
    // it is still executing.
    modifier noReentrancy() {
        require(!locked, \\"No reentrancy\\");

        locked = true;
        _;
        locked = false;
    }

    function decrement(uint i) public noReentrancy {
        x -= i;

        if (i &gt; 1) {
            decrement(i - 1);
        }
    }
}
</code></pre>
"
  title="Function Modifier"
  version="0.6.0"
/>
`;
